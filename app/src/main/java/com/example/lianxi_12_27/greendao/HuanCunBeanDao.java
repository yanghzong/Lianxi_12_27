package com.example.lianxi_12_27.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.lianxi_12_27.bean.HuanCunBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HUAN_CUN_BEAN".
*/
public class HuanCunBeanDao extends AbstractDao<HuanCunBean, Void> {

    public static final String TABLENAME = "HUAN_CUN_BEAN";

    /**
     * Properties of entity HuanCunBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BargainPrice = new Property(0, double.class, "bargainPrice", false, "BARGAIN_PRICE");
        public final static Property Createtime = new Property(1, String.class, "createtime", false, "CREATETIME");
        public final static Property DetailUrl = new Property(2, String.class, "detailUrl", false, "DETAIL_URL");
        public final static Property Images = new Property(3, String.class, "images", false, "IMAGES");
        public final static Property Pid = new Property(4, int.class, "pid", false, "PID");
        public final static Property Price = new Property(5, String.class, "price", false, "PRICE");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
    }


    public HuanCunBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HuanCunBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HUAN_CUN_BEAN\" (" + //
                "\"BARGAIN_PRICE\" REAL NOT NULL ," + // 0: bargainPrice
                "\"CREATETIME\" TEXT," + // 1: createtime
                "\"DETAIL_URL\" TEXT," + // 2: detailUrl
                "\"IMAGES\" TEXT," + // 3: images
                "\"PID\" INTEGER NOT NULL ," + // 4: pid
                "\"PRICE\" REAL NOT NULL ," + // 5: price
                "\"TITLE\" TEXT);"); // 6: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HUAN_CUN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HuanCunBean entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getBargainPrice());
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(2, createtime);
        }
 
        String detailUrl = entity.getDetailUrl();
        if (detailUrl != null) {
            stmt.bindString(3, detailUrl);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(4, images);
        }
        stmt.bindLong(5, entity.getPid());
        stmt.bindString(6, entity.getPrice());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HuanCunBean entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getBargainPrice());
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(2, createtime);
        }
 
        String detailUrl = entity.getDetailUrl();
        if (detailUrl != null) {
            stmt.bindString(3, detailUrl);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(4, images);
        }
        stmt.bindLong(5, entity.getPid());
        stmt.bindString(6, entity.getPrice());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HuanCunBean readEntity(Cursor cursor, int offset) {
        HuanCunBean entity = new HuanCunBean( //
            cursor.getDouble(offset + 0), // bargainPrice
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createtime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // detailUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // images
            cursor.getInt(offset + 4), // pid
            cursor.getString(offset + 5), // price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HuanCunBean entity, int offset) {
        entity.setBargainPrice(cursor.getDouble(offset + 0));
        entity.setCreatetime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDetailUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImages(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPid(cursor.getInt(offset + 4));
        entity.setPrice(cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HuanCunBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HuanCunBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(HuanCunBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
